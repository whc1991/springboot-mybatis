

#debug窗口显示sql语句
logging.level.com.cloud.dao=debug


server.port=8070
server.servlet.path=/


spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/springboot?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456
#初始化连接
spring.datasource.initialSize=10
# 配置获取连接等待超时的时间
spring.datasource.maxWait=10000
#最大空闲连接
spring.datasource.maxActive=20
#最小空闲连接
spring.datasource.minIdle=5
spring.datasource.validationQuery=SELECT 'x'
#（即在获取Connection对象时检测其可用性）  这样会影响性能，但是这个配置是最有效的。
spring.datasource.testOnBorrow=true
#有些数据库连接的时候有超时限制（mysql连接在8小时后断开），或者由于网络中断等原因，连接池的连接会出现失效的情况，
#这时候设置一个testWhileIdle参数为true，可以保证连接池内部定时检测连接的可用性，不可用的连接会被抛弃或者重建，最大情况的保证从连接池中得到的Connection对象是可用的
spring.datasource.testWhileIdle=true
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=300000
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true 
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource

#mybatis.mapper-locations=classpath:mapping/*.xml
#mybatis.type-aliases-package=com.cloud.domain
#mybatis.configuration.map-underscore-to-camel-case=true




